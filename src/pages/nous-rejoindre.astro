---
import type { LieuHierarchique, GeolienEntry, GeolienData, ProcessedGeolien } from '../types/geoliens';
import { loadGeolienData } from '../lib/geoliens';
import '../styles/app.css';
import SearchForm from '../components/SearchForm.astro';
import ViewToggle from '../components/ViewToggle.astro';
import GeolienGrid from '../components/GeolienGrid.astro';
import MapView from '../components/MapView.astro';
import HierarchicalView from '../components/HierarchicalView.astro';

const geolienDataTyped = await loadGeolienData();
const rawData = [...geolienDataTyped.reseaux, ...geolienDataTyped.regions];

// Fonction utilitaire pour vérifier si une entrée est un lieu hiérarchique
function isLieuHierarchique(entry: GeolienEntry): entry is LieuHierarchique {
	const hasLiens = 'liens' in entry && Array.isArray((entry as LieuHierarchique).liens);
	const hasNomOnly = !('type' in entry) && !('url' in entry) && 'nom' in entry;
	return hasLiens && hasNomOnly;
}

// Fonction utilitaire pour aplatir la structure de données avec gestion de la hiérarchie
function flattenGeoliens(data: GeolienEntry[], parentPath: string = ''): ProcessedGeolien[] {
	const result: ProcessedGeolien[] = [];

	data.forEach((entry) => {
		if (isLieuHierarchique(entry)) {
			// Construire le chemin hiérarchique complet
			const currentPath = parentPath ? `${parentPath} > ${entry.nom}` : entry.nom;

			// Gérer les entrées hiérarchiques et ajouter leurs liens
			if (entry.liens && entry.liens.length > 0) {
				entry.liens.forEach(lien => {
					result.push({
						...lien,
						lieuNom: entry.nom,
						fullPath: currentPath
					});
				});
			}

			// Gérer récursivement les sousLieux avec le chemin mis à jour
			if (entry.sousLieux && entry.sousLieux.length > 0) {
				result.push(...flattenGeoliens(entry.sousLieux, currentPath));
			}
		} else {
			// Gérer les entrées plates (liens directs) - celles-ci sont au niveau racine
			result.push({
				...entry,
				fullPath: parentPath || 'Root'
			});
		}
	});

	return result;
}

const geoliens = flattenGeoliens(rawData);
---
<!DOCTYPE html>
<html lang="fr">
<head>
	<meta charset="utf-8">
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<title>Nous Rejoindre - Trouver un groupe près de chez vous</title>
</head>
<body class="bg-neutral-dark min-h-screen font-theme" >
	<div class="container mx-auto px-2 md:px-4 py-8">
		<header class="mb-8">
			<h1 class="text-2xl md:text-4xl font-bold text-neutral-50 mb-4 max-w-2xl">Dès maintenant, je rejoins le mouvement près de chez moi.</h1>
			<p class="text-base font-medium text-neutral-50 mb-6">Des centaines de groupes locaux s'organisent. Trouvez le vôtre et agissez.</p>
		</header>

		<ViewToggle />

		<SearchForm resultsCount={geoliens.length} />

		<HierarchicalView geoliens={geoliens} />

		<GeolienGrid geoliens={geoliens} />

		<MapView />
	</div>

	<script is:inline define:vars={{ geoliens }}>

		// DOM elements
		const listViewBtn = document.getElementById('list-view-btn');
		const hierarchicalViewBtn = document.getElementById('hierarchical-view-btn');
		const mapViewBtn = document.getElementById('map-view-btn');
		const listView = document.getElementById('list-view');
		const hierarchicalView = document.getElementById('hierarchical-view');
		const mapView = document.getElementById('map-view');
		const searchText = document.getElementById('search-text');
		const searchType = document.getElementById('search-type');
		const searchTerritoire = document.getElementById('search-territoire');
		const searchLocation = document.getElementById('search-location');
		const clearFiltersBtn = document.getElementById('clear-filters');
		const resultsCount = document.getElementById('results-count');
		const geolienCards = document.querySelectorAll('.geolien-card');
		const noResults = document.getElementById('no-results');

		// View switching
		function switchToListView() {
			if (listView) listView.classList.remove('hidden');
			if (hierarchicalView) hierarchicalView.classList.add('hidden');
			if (mapView) mapView.classList.add('hidden');

			// Afficher la barre de recherche
			const searchForm = document.querySelector('.search-form-container');
			if (searchForm) {
				searchForm.style.display = 'block';
			}

			if (listViewBtn) {
				listViewBtn.classList.add('bg-primary-yellow', 'text-neutral-dark');
				listViewBtn.classList.remove('bg-neutral-dark', 'text-neutral-medium');
			}

			if (hierarchicalViewBtn) {
				hierarchicalViewBtn.classList.remove('bg-primary-yellow', 'text-neutral-dark');
				hierarchicalViewBtn.classList.add('bg-neutral-dark', 'text-neutral-medium');
			}

			if (mapViewBtn) {
				mapViewBtn.classList.remove('bg-primary-yellow', 'text-neutral-dark');
				mapViewBtn.classList.add('bg-neutral-dark', 'text-neutral-medium');
			}

			// Save view preference
			localStorage.setItem('viewPreference', 'list');
		}

		function switchToHierarchicalView() {
			if (listView) listView.classList.add('hidden');
			if (hierarchicalView) hierarchicalView.classList.remove('hidden');
			if (mapView) mapView.classList.add('hidden');

			// Afficher la barre de recherche
			const searchForm = document.querySelector('.search-form-container');
			if (searchForm) {
				searchForm.style.display = 'block';
			}

			if (listViewBtn) {
				listViewBtn.classList.remove('bg-primary-yellow', 'text-neutral-dark');
				listViewBtn.classList.add('bg-neutral-dark', 'text-neutral-medium');
			}

			if (hierarchicalViewBtn) {
				hierarchicalViewBtn.classList.add('bg-primary-yellow', 'text-neutral-dark');
				hierarchicalViewBtn.classList.remove('bg-neutral-dark', 'text-neutral-medium');
			}

			if (mapViewBtn) {
				mapViewBtn.classList.remove('bg-primary-yellow', 'text-neutral-dark');
				mapViewBtn.classList.add('bg-neutral-dark', 'text-neutral-medium');
			}

			// Save view preference
			localStorage.setItem('viewPreference', 'hierarchical');
		}

		function switchToMapView() {
			if (listView) listView.classList.add('hidden');
			if (hierarchicalView) hierarchicalView.classList.add('hidden');
			if (mapView) mapView.classList.remove('hidden');

			// Masquer la barre de recherche pour la vue carte
			const searchForm = document.querySelector('.search-form-container');
			if (searchForm) {
				searchForm.style.display = 'none';
			}

			if (listViewBtn) {
				listViewBtn.classList.remove('bg-primary-yellow', 'text-neutral-dark');
				listViewBtn.classList.add('bg-neutral-dark', 'text-neutral-medium');
			}

			if (hierarchicalViewBtn) {
				hierarchicalViewBtn.classList.remove('bg-neutral-dark', 'text-neutral-medium');
				hierarchicalViewBtn.classList.add('bg-neutral-dark', 'text-neutral-medium');
			}

			if (mapViewBtn) {
				mapViewBtn.classList.add('bg-primary-yellow', 'text-neutral-medium');
				mapViewBtn.classList.remove('bg-neutral-dark', 'text-neutral-medium');
			}

			// Save view preference
			localStorage.setItem('viewPreference', 'map');
		}


		if (listViewBtn) listViewBtn.addEventListener('click', switchToListView);
		if (hierarchicalViewBtn) hierarchicalViewBtn.addEventListener('click', switchToHierarchicalView);
		if (mapViewBtn) mapViewBtn.addEventListener('click', switchToMapView);

		// Filtering function
		function filterResults() {
			const searchQuery = (searchText?.value || '').toLowerCase().trim();
			const selectedType = searchType?.value || '';
			const selectedTerritoire = searchTerritoire?.value || '';
			const locationQuery = (searchLocation?.value || '').toLowerCase().trim();

			let visibleCount = 0;

			// Filtrer les cartes de la vue liste
			geolienCards.forEach(card => {
				const cardNom = card.dataset.nom || '';
				const cardType = card.dataset.type || '';
				const cardTerritoire = card.dataset.territoire || '';
				const cardLieu = card.dataset.lieu || '';
				const cardFullPath = card.dataset.fullpath || '';

				// Get the full text content for location search (including group name)
				const fullText = (card.textContent || '').toLowerCase();

				const matchesSearch = !searchQuery || cardNom.includes(searchQuery);
				const matchesType = !selectedType || cardType === selectedType;
				const matchesTerritoire = !selectedTerritoire || cardTerritoire === selectedTerritoire;
				const matchesLocation = !locationQuery ||
					fullText.includes(locationQuery) ||
					(cardLieu && cardLieu.includes(locationQuery)) ||
					(cardFullPath && cardFullPath.includes(locationQuery));

				const isVisible = matchesSearch && matchesType && matchesTerritoire && matchesLocation;

				if (isVisible) {
					card.style.display = 'block';
					visibleCount++;
				} else {
					card.style.display = 'none';
				}
			});

			// Filtrer les éléments de la vue hiérarchique
			let hierarchicalVisibleCount = 0;
			const regionSections = document.querySelectorAll('.region-section');

			regionSections.forEach(regionSection => {
				let regionHasVisibleGroups = false;
				const departmentGroups = regionSection.querySelectorAll('.department-group');
				const regionalTiles = regionSection.querySelectorAll('.regional-group-tile');

				// Traiter les tuiles régionales (affichées au-dessus des départements)
					regionalTiles.forEach(tile => {
						const t = tile;
					const tileName = t.dataset.name || '';
					const tileType = t.dataset.type || '';
					const tileTerritory = (t.dataset.territoire || '').toLowerCase();
					const tileRegion = t.dataset.region || (regionSection.dataset.region || '');
					const tileLocal = t.dataset.local || '';

					const matchesSearch = !searchQuery || tileName.includes(searchQuery) || tileLocal.includes(searchQuery) || tileRegion.includes(searchQuery);
					const matchesType = !selectedType || tileType === selectedType;
					const matchesTerritoire = !selectedTerritoire || tileTerritory === selectedTerritoire.toLowerCase();
					const matchesLocation = !locationQuery ||
						tileName.includes(locationQuery) ||
						tileLocal.includes(locationQuery) ||
						tileRegion.includes(locationQuery);

					const isVisible = matchesSearch && matchesType && matchesTerritoire && matchesLocation;
						// Masquer l'ancre englobante via une classe utilitaire pour ne pas casser le display flex
						const anchor = t.closest('a');
						if (anchor) {
							anchor.classList.toggle('hidden', !isVisible);
						} else {
							t.classList.toggle('hidden', !isVisible);
						}
					if (isVisible) {
						regionHasVisibleGroups = true;
						hierarchicalVisibleCount++;
					}
				});

                departmentGroups.forEach(departmentGroup => {
                    let departmentHasVisibleGroups = false;
                    const groupTiles = departmentGroup.querySelectorAll('.group-tile');

					groupTiles.forEach(tile => {
					const tileName = tile.dataset.name || '';
					const tileType = tile.dataset.type || '';
					const tileTerritory = (tile.dataset.territoire || '').toLowerCase();
					const tileDepartment = tile.dataset.department || '';
					const tileRegion = tile.dataset.region || (regionSection.dataset.region || '');
					const tileLocal = tile.dataset.local || '';

					const matchesSearch = !searchQuery ||
						tileName.includes(searchQuery) ||
						tileLocal.includes(searchQuery) ||
						tileDepartment.includes(searchQuery) ||
						tileRegion.includes(searchQuery);
						const matchesType = !selectedType || tileType === selectedType;
						const matchesTerritoire = !selectedTerritoire || tileTerritory === selectedTerritoire.toLowerCase();
					const matchesLocation = !locationQuery ||
						tileName.includes(locationQuery) ||
						tileLocal.includes(locationQuery) ||
						tileDepartment.includes(locationQuery) ||
						tileRegion.includes(locationQuery);

						const isVisible = matchesSearch && matchesType && matchesTerritoire && matchesLocation;

						// Utiliser une classe pour ne pas modifier le type d'affichage
                        tile.classList.toggle('hidden', !isVisible);
                        if (isVisible) {
                            departmentHasVisibleGroups = true;
                            regionHasVisibleGroups = true;
                            hierarchicalVisibleCount++;
                        }
                    });

                    // Masquer/afficher le groupe de département
                    departmentGroup.classList.toggle('hidden', !departmentHasVisibleGroups);

                    // Ouvrir/fermer automatiquement les départements si une recherche géographique est saisie
                    if (locationQuery) {
                        const dHeader = departmentGroup.querySelector('.department-header');
                        const dContent = departmentGroup.querySelector('.department-content');
                        if (departmentHasVisibleGroups) {
                            dHeader?.setAttribute('aria-expanded', 'true');
                            dContent?.classList.remove('hidden');
                            dContent?.setAttribute('aria-hidden', 'false');
                        } else {
                            dHeader?.setAttribute('aria-expanded', 'false');
                            dContent?.classList.add('hidden');
                            dContent?.setAttribute('aria-hidden', 'true');
                        }
                    }
                });

				// Masquer/afficher la section région
				regionSection.classList.toggle('hidden', !regionHasVisibleGroups);

				// Si une recherche géographique est saisie, ouvrir automatiquement
				// les régions qui contiennent des résultats et fermer les autres
				if (locationQuery) {
					const header = regionSection.querySelector('.region-header');
					const content = regionSection.querySelector('.region-content');
					const caret = header?.querySelector('.region-caret');

					if (regionHasVisibleGroups) {
						if (header && header.getAttribute('aria-expanded') !== 'true') {
							header.setAttribute('aria-expanded', 'true');
						}
						content?.classList.remove('max-h-0');
						content?.setAttribute('aria-hidden', 'false');
						caret?.classList.add('rotate-180');
					} else {
						if (header && header.getAttribute('aria-expanded') !== 'false') {
							header.setAttribute('aria-expanded', 'false');
						}
						content?.classList.add('max-h-0');
						content?.setAttribute('aria-hidden', 'true');
						caret?.classList.remove('rotate-180');
					}
				}
			});

			// Update results count based on current view
			const currentVisibleCount = !hierarchicalView || hierarchicalView.classList.contains('hidden') ? visibleCount : hierarchicalVisibleCount;
			if (resultsCount) resultsCount.textContent = currentVisibleCount;

			// Show/hide no results message
			if (currentVisibleCount === 0) {
				if (!hierarchicalView.classList.contains('hidden')) {
					// Vue hiérarchique active
					const hierarchicalNoResults = document.getElementById('hierarchical-no-results');
					if (hierarchicalNoResults) {
						hierarchicalNoResults.classList.remove('hidden');
					}
				} else {
					// Vue liste active
					const gridEl = document.getElementById('geoliens-grid');
					if (gridEl) gridEl.style.display = 'none';
					if (noResults) noResults.classList.remove('hidden');
				}
			} else {
				// Masquer tous les messages "aucun résultat"
				const gridEl = document.getElementById('geoliens-grid');
				if (gridEl) gridEl.style.display = 'grid';
				if (noResults) noResults.classList.add('hidden');
				const hierarchicalNoResults = document.getElementById('hierarchical-no-results');
				if (hierarchicalNoResults) {
					hierarchicalNoResults.classList.add('hidden');
				}
			}
		}

		// Clear filters
		function clearFilters() {
			if (searchText) searchText.value = '';
			if (searchType) searchType.value = '';
			if (searchTerritoire) searchTerritoire.value = '';
			if (searchLocation) searchLocation.value = '';
			filterResults();
		}

		// Event listeners for real-time filtering
		if (searchText) searchText.addEventListener('input', filterResults);
		if (searchType) searchType.addEventListener('change', filterResults);
		if (searchTerritoire) searchTerritoire.addEventListener('change', filterResults);
		if (searchLocation) searchLocation.addEventListener('input', filterResults);
		if (clearFiltersBtn) clearFiltersBtn.addEventListener('click', clearFilters);

		// Initialize view from localStorage
		function initializeView() {
			const savedView = localStorage.getItem('viewPreference');

			if (savedView === 'hierarchical') {
				switchToHierarchicalView();
			} else if (savedView === 'map') {
				switchToMapView();
			} else {
				// Default to list view if no preference or 'list'
				switchToHierarchicalView();
			}
		}

		// Initialize
		initializeView();
		filterResults();
	</script>
</body>
</html>
